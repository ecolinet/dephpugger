{"pages":[{"title":"Dephpugger","text":"","tags":"","url":"index.html"},{"title":"Dephpugger","text":"The best way to debug your PHP application DePHPugger is a tool to debug your php applications using any framework for web or your php cli codes. You can see in terminal, without necessary install an IDE to use. Is very simple and usefull. Why? In another languages (like Python and Ruby), is really normal start a web server in terminal and start to develop you application code. In PHP many people install the nginx or apache to make run an application in local development. But, after PHP 5.4, you can start your webserver running a simple command too. $ php -S localhost:8080 I prefer this mode, because you don't need install many things, only PHP. Following another languages example, if you are a Python developer and you want start a debug in a breakpoint to check the code flow, you can use the lib Ipdb, and in the same server you will see the code stopping and in terminal will appear the code lines. In ruby language is very similar, you can install the lib Byebug and start use. You need only write byebug in your code and you have the same effect described in Python language. But, if you are a PHP developer, you must install xDebug first, choose an IDE or editor, search for a tutorial how integrate &lt;my editor&gt; with xDebug. If you want change the IDE, you must install again. This is really bad, because many developers can't install and prefer to use var_dump($variable); die() to see a variable value in each request. This project is the solution for this problems, you will start a built-in web server in one terminal and the debugger in another terminal. Is really easy to use. PHP Documentor To see the PHPDOCUMENTOR classes, click in image bellow.","tags":"","url":"Dephpugger.html"},{"title":"Dependencies","text":"Dependencies The dephpugger use a few libs in PHP to run the debugger. PHP 7.0 or more (not tested in older versions) XDebug Composer A Plugin for your browser (If you want to debug a web application) Plugins for Chrome Firefox Safari Opera","tags":"","url":"Installation\/Dependencies.html"},{"title":"XDebug","text":"Installation of XDebug Follow this steps. For Linux First, run this command: $ sudo apt-get install php-xdebug For Mac Os X $ brew install php-xdebug For Windows users I'm sorry :\/ You can use Docker or Vagrant or make a pull request for me :D Activating the xDebug Now you have the xDebug installed in your machine. After this, you must change the file php.ini to your php-cli and active this one. To see if your xDebug is installed, you can run. $ php -i | grep &quot;xdebug support&quot; --color xdebug support =&gt; enabled If the result bring disabled, you must change your php.ini file or your xdebug.ini file (if exists). First, try to get the xdebug.ini file. $ php -i | grep xdebug.ini \/etc\/php\/7.0\/cli\/conf.d\/20-xdebug.ini If doesn't exist, you can get the php.ini file, you can run. $ php -i | grep php.ini --color Configuration File (php.ini) Path =&gt; \/etc\/php\/7.0\/cli Loaded Configuration File =&gt; \/etc\/php\/7.0\/cli\/php.ini Open your the .ini file with your editor (must sudo user) and add this line. zend_extension=\/path\/to\/your\/xdebug.so The path in Mac Os X is: \/usr\/local\/opt\/php70-xdebug\/xdebug.so. The path in Ubuntu is: \/usr\/lib\/php\/20151012\/xdebug.so. Run again and check if your xdebug is installed. $ php -i | grep &quot;xdebug support&quot; --color xdebug support =&gt; enabled You can get more info about installation clicking here.","tags":"","url":"Installation\/XDebug.html"},{"title":"Composer","text":"Composer There are millions of tutorials how install composer in your local machine. This is only one more. $ wget https:\/\/getcomposer.org\/composer.phar $ chmod +x composer.phar $ mv composer.phar \/usr\/local\/bin\/composer $ composer self-update Now you can run commands to composer.","tags":"","url":"Installation\/Composer.html"},{"title":"Browser Plugin","text":"Browser plugin (only for web applications) You must install a plugin for your favorite browser. Plugins for Chrome Firefox Safari Opera We will show how you can use the Chrome plugin. Chrome This steps are very similar for all browsers. After install you will see a bug in your browser. You need to go to open localhost:8888 and click in the chrome plugin button. A dropdown will apear. Now, click in the first option Debug. You will see the button in browser green. When the button is green, your debugger is activated.","tags":"","url":"Installation\/Browser_Plugin.html"},{"title":"Dephpugger","text":"Dephugger You can install dephpugger in two different ways. In your local project or in global path. # Global mode $ composer global require &quot;tacnoman\/dephpugger&quot;:&quot;dev-master&quot; # Local mode $ composer require &quot;tacnoman\/dephpugger&quot;:&quot;dev-master&quot; For global mode When you use composer in global mode, it creates a folder called .composer in your home. Open your ~\/.bash_profile and add this lines. if [ -d &quot;$HOME\/.composer\/vendor\/bin&quot; ] ; then PATH=&quot;$PATH:$HOME\/.config\/composer\/vendor\/bin&quot; fi Now you can run the command dephpugger. For local mode php vendor\/bin\/dephpugger You will see this:","tags":"","url":"Installation\/Dephpugger.html"},{"title":"Usage Video Tutorial","text":"Simple usage in tutorial here For web application For cli application","tags":"","url":"Usage\/Usage_Video_Tutorial.html"},{"title":"Running Dephpugger","text":"About Dephpugger Now, you have installed the Dephpugger in your machine. You can run this command to see if all is ok. For the next tutorials we will use the command dephpugger global. If you are using local, you can change the command dephpugger to php vendor\/bin\/dephpugger. $ dephpugger requirements You will see this. Running Dephpugger To run a webserver debug or a cli application debug, you must start two windows in terminal. In the first to start a webserver built-in or cli and in the second, the debugger. Open a terminal and run this command: $ dephpugger debug You will see this. The debugger start a socket server in port 9005 and now is waiting a breakpoint. Now, create a simple php file to test. &lt;?php # File test.php $int = 1; $array = ['one', 'two', 'three']; echo $int; echo $array[1]; Now, add a command xdebug_break(); in your code. Like this. &lt;?php # File test.php $int = 1; $array = ['one', 'two', 'three']; xdebug_break(); # &lt;-- Add this line echo $int; echo $array[1]; Open another terminal, and run. $ debugger cli test.php The breakpoint is created, and you can see the debugger start.","tags":"","url":"Usage\/Running_Dephpugger.html"},{"title":"Commands To Run","text":"Commands When the debugger stop in a breakpoint, it wait the developer send commands to navigate in code. Create a file called quicksort.php (or with another algorithm). We will use this file for example. &lt;?php $unsorted = array(43,21,2,1,9,24,2,99,23,8,7,114,92,5); function quick_sort($array) { $length = count($array); if($length &lt;= 1){ return $array; } else { $pivot = $array[0]; $left = $right = array(); for($i = 1; $i &lt; count($array); $i++) { if($array[$i] &lt; $pivot){ $left[] = $array[$i]; } else { $right[] = $array[$i]; } } return array_merge(quick_sort($left), array($pivot), quick_sort($right)); } } xdebug_break(); $sorted = quick_sort($unsorted); echo 'Unsorted numbers: ',implode(', ', $unsorted).PHP_EOL; echo 'Sorted numbers: '.implode(', ', $sorted).PHP_EOL; Run in different terminals. $ dephpugger debug # in first terminal $ dephpugger cli quicksort.php # in another terminal The debugger is waiting you to run a command. If you run the command help, you will see all possible commands. Command Alias Explanation next n To run a step over in code step s To run a step into in code Change verboseMode or lineOffset in runtime continue c To continue script until found another breakpoint or finish the code list l Show next lines in script list-previous lp Show previous lines in script help h Show help instructions $variable Get a value from a variable $variable = 33 Set a variable my_function() Call a function dbgp(&lt; command &gt;) To run a command in dbgp quit q Exit the debugger Now you can navigate in the algorithm and investigate. Press n to go to the next line, if exists. Press s and press enter to get inside the method. Press l to see the next lines. Press lp to see the previous lines. Key the variable name to get the value and type. You can change the variable value in runtime. See example","tags":"","url":"Usage\/Commands_To_Run.html"},{"title":"Running For web","text":"Running for web Forget your apache, forget your nginx in your local development. The PHP has a built in web server in php-cli since 5.4.0 version. You can start a webserver running this simple command. $ php -S localhost:8000 If you open in your browser http:\/\/localhost:8000, you will se working. The Symfony framework has a command to start a webserver too php bin\/console server:start. Now, you will use the dephpugger's web server. The Dephpugger webserver will use the this command, but with more parameters to connect with dephpugger's debug. To start a web server application, run. $ dephpugger server This commands run php -S &lt;host&gt;:&lt;port&gt; -t \/path\/to\/project -dxdebug.remote_enable=1 -dxdeb... this command in background. Create a simple index.php with a simple hello world and see working. You can change the default port changing the configuration. Open another terminal window and start the dephpugger. $ dephpugger debug In your index.php code, add this line. xdebug_break(); You must activate your browser plugin (How activate my brower plugin? Click here) Now you can refresh the page and see the debugger works. See an example using Lumen framwork. In this example, exist a bug because the $_GET return always a string and the code need an integer. Solving this in video bellow.","tags":"","url":"Usage\/Running_For_web.html"},{"title":"Running with phpunit","text":"Running with PHPUNIT (or another test suit) The dephpugger running cli, only create a complex command and run in terminal. To use PHPUNIT isn't different. Follow the steps bellow. Install phpunit First, you can install in multiple different ways. The most simple is installing using the composer. Run the code bellow in your root project path. $ composer require &quot;phpunit\/phpunit&quot;:&quot;*&quot; This command will install the phpunit executable in path vendor\/bin\/phpunit. Now, instead of run the code vendor\/bin\/phpunit to run the tests, you must run: $ dephpugger cli vendor\/bin\/phpunit Ps: If you install in global path, you can run using only dephpugger cli phpunit, or if you prefer use the phar file dephpugger cli \/path\/to\/phpunit.phar. Ps2: If you install the phpunit using Homebrew (Mac OS X) this command doesn't work, because the executable file using Homebrew is a bash script calling a phar file, not a php file. Using with another test tool You can use in the same way for different suit tests. For example, if you want use with codeception, follow these steps. # Install first $ composer install &quot;codeception\/codeception&quot;:&quot;*&quot; # Run tests $ dephpugger cli vendor\/bin\/codeception To run behat or another, you must only change the codeception's path to another. Adding parameteres to test suit If you are want pass parameters to your suit test (in example, PHPUNIT), you must add the command between quotation marks. $ dephpugger cli &quot;phpunit --bootstrap src\/Email.php tests\/emailTest&quot; Following example basic example in phpunit documentation, you will see.","tags":"","url":"Usage\/Running_with_phpunit.html"},{"title":"Configuration","text":"Configuring in your project The dephpugger use default values to run. For example, the server run in a port 8888. But there is a way to change theese configurations. The Dephpugger get the default value, and after this, check if exists a file called .dephpugger.yml in root project folder. If this file exists, the values will be replaced for the default configuration. The defualt configuration is... \/** * Default config that will be replaced by *.dephpugger.yml* file *\/ private $defaultConfig = [ 'server' =&gt; [ 'port' =&gt; 8888, 'host' =&gt; 'localhost', 'phpPath' =&gt; 'php', 'path' =&gt; null, 'file' =&gt; '', ], 'debugger' =&gt; [ 'port' =&gt; 9005, 'host' =&gt; 'localhost', 'lineOffset' =&gt; 6, 'verboseMode' =&gt; false, 'historyFile' =&gt; '.dephpugger_history', ], ]; Now, you can change the default values creating the file .dephpugger.yml. --- debugger: host: mysocket.dev # default: localhost port: 9002 # default: 9005 lineOffset: 10 # default: 6 path: .\/public\/ # default: null file: index.php # default: null verboseMode: false # default: false historyFile: ~\/.dephpugger_history # default: .dephpugger_history server: host: myproject.dev # default: localhost phpPath: \/usr\/local\/bin\/php # default: php port: 8080 # default: 8888 Ps: You don't need rewrite every configurations, if you want edit only the port for server, you can create this file. --- server: port: 8080 All default configurations will keep the default value and the port now is 8080 instead of 8888. Now, restart the dephpugger and be happy ;D.","tags":"","url":"Configuration\/index.html"},{"title":"Lumen Framework","text":"Using Dephpugger in Lumen Framework Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/public\/ port: 8000 Run the commands bellow in different terminal windows (You must run in the root path). $ dephpugger server $ dephpugger debug Open http:\/\/localhost:8000 and get work!","tags":"","url":"Configuration\/Lumen_Framework.html"},{"title":"Laravel Framework","text":"Using Dephpugger in Laravel Framework Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/public\/ port: 8000 Run the commands bellow in different terminal windows (You must run in the root path). $ dephpugger server $ dephpugger debug You don't need use more php artisan serve. If you run this command, you won't get the debugger in breakpoints. Open http:\/\/localhost:8000 and get work!","tags":"","url":"Configuration\/Laravel_Framework.html"},{"title":"Zend Framework 2","text":"Using Dephpugger in ZF2 Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/public\/ file: index.php port: 8080 The ZF2 start the server using a command setted in composer.json running composer serve. If you want keep using this command instead of dephpugger server and dephpugger debug, you can change the composer.json file. Replace in scripts this line. .... &quot;serve&quot;: &quot;php -S 0.0.0.0:8080 -t public public\/index.php&quot;, .... To this. &quot;serve&quot;: &quot;dephpugger server&quot;, If you aren't using the dephpugger in global mode, you can run composer require tacnoman\/dephpugger and add this lines. &quot;serve&quot;: &quot;php vendor\/bin\/dephpugger server&quot;, And now run in different terminals. $ composer serve $ dephpugger debug # Or php vendor\/bin\/dephpugger debug Open http:\/\/localhost:8080 and get work!","tags":"","url":"Configuration\/Zend_Framework_2.html"},{"title":"Symfony","text":"Using Dephpugger in Symfony Framework Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/web\/ port: 8000 file: app.php Run the commands bellow in different terminal windows (You must run in the root path). $ dephpugger server $ dephpugger debug You don't need use more php bin\/console server:run to start the server. If you run this command, you won't get the debugger in breakpoints. Open http:\/\/localhost:8000 and get work!","tags":"","url":"Configuration\/Symfony.html"},{"title":"Slim Framework","text":"Using Dephpugger in Slim Framework Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/public\/ port: 8080 Run the commands bellow in different terminal windows (You must run in the root path). $ dephpugger server $ dephpugger debug Open http:\/\/localhost:8080 and get work!","tags":"","url":"Configuration\/Slim_Framework.html"},{"title":"Silex Framework","text":"Using Dephpugger in Silex Framework Add in root directory the file .dephpugger.yml with the content bellow. --- server: path: .\/web\/ port: 8888 The Silex Framework start the web application in development using the composer running composer run. Go to your composer.json file and replace this: &quot;scripts&quot;: { &quot;run&quot;: [ &quot;echo 'Started web server on http:\/\/localhost:8888'&quot;, &quot;php -S localhost:8888 -t web&quot; ] } To this: &quot;scripts&quot;: { &quot;run&quot;: [ &quot;echo 'Started web server on http:\/\/localhost:8888'&quot;, &quot;dephpugger server&quot; &lt;&lt; This line ] } If you aren't using the dephpugger in global mode, you can change the line dephpugger server to php vendor\/bin\/dephpugger server. Run the commands bellow in different terminal windows (You must run in the root path). $ COMPOSER_PROCESS_TIMEOUT=0 composer run # To start a server $ dephpugger debug # Or &quot;php vendor\/bin\/dephpugger debug&quot; in local mode Open http:\/\/localhost:8888 and get work!","tags":"","url":"Configuration\/Silex_Framework.html"},{"title":"Yii2 Framework","text":"Using Dephpugger in Yii2 Framework Add in root directory the file .dephpugger.yml with the content bellow. Basic application --- server: path: .\/web\/ port: 8080 Run the commands bellow in different terminal windows (You must run in the root path). $ dephpugger server # Instead of php yii serve $ dephpugger debug Advanced application Create a file called dephpugger.yml in frontend\/web\/ and backend\/web\/. --- server: port: 8080 Go to web folder and run in different terminals. $ dephpugger server # Instead of php yii serve $ dephpugger debug Open http:\/\/localhost:8080 and get work!","tags":"","url":"Configuration\/Yii2_Framework.html"}]}